syntax = "proto3";

package seti.v1;

option go_package = "github.com/KontonGu/FaST-GShare/proto/seti/v1;seti";

// Empty request for getting available GPUs
message GetAvailableGPUsRequest {}

// Response containing list of available GPUs
message GetAvailableGPUsResponse {
  repeated VirtualGPU gpus = 1;
  repeated VirtualGPU gpus_in_use = 2;
}

// Message representing a virtual GPU
message VirtualGPU {
  optional uint32 profileid = 6;
  string id = 1;
  int32 device_index = 2;
  uint64 memory_bytes = 3;
  int32 multiprocessor_count = 4;
  bool is_provisioned = 5;
  bool is_physical = 9;
  string physical_gpu_type = 10;
  int32 sm_percentage = 11; //0-100 (for mig gpu) for other gpus it is 100
  optional GPU provisioned_gpu = 7;
}

// Message representing a physical GPU
message GPU {
  string uuid = 1;
  string name = 2;
  uint64 memory_bytes = 3;
  int32 multiprocessor_count = 4;
  int32 parent_device_index = 5;
  string parent_uuid = 6;
  bool mps_enabled = 7;
  optional MPSConfig mps_config = 8;
}

message MPSConfig {
  string device_uuid = 1;
  string log_path = 2;
  string tmp_path = 3;
}

// Request for a virtual GPU with specific requirements
message RequestVirtualGPURequest {
  optional uint32 profileid = 1;
  optional string device_uuid = 2;
  bool use_mps = 3;
}

message RequestVirtualGPUResponse {
  string id = 1;
  int32 device_index = 2;
  uint64 memory_bytes = 3;
  int32 multiprocessor_count = 4;

  optional GPU provisioned_gpu = 7;

  repeated VirtualGPU available_virtual_gpus = 8;
}

message GetHealthRequest {}

message GetHealthResponse {
  bool healthy = 2;
  optional string message = 3;
}

message FastPodGPUConfig {
  // PodName is the name of the pod namespace+name
  string key = 1;
  double qt_request = 2;
  double qt_limit = 3;
  int64 sm_partition = 4;
  int64 memory = 5;
  int32 gpu_client_port = 6;
}

message UpdateMPSConfigsRequest {
  string device_uuid = 1;
  repeated FastPodGPUConfig fastpod_gpu_configs = 2;
}

message UpdateMPSConfigsResponse {}

message EnableMPSRequest {
  string device_uuid = 1;
}

message EnableMPSResponse {
  bool success = 1;
  string message = 2;
  MPSConfig mps_config = 3;
}
message DisableMPSRequest {
  string device_uuid = 1;
}
message DisableMPSResponse {
  bool success = 1;
  string message = 2;
}

// Message for requesting to release a virtual GPU
message ReleaseVirtualGPURequest {
  string uuid = 1;
}

// Response for a virtual GPU release request
message ReleaseVirtualGPUResponse {
  bool success = 1;
  string message = 2;

  repeated VirtualGPU available_virtual_gpus = 3;
}

// Service definition for GPU resource management
service GPUConfiguratorService {
  // Get available virtual GPUs
  rpc GetAvailableGPUs(GetAvailableGPUsRequest) returns (GetAvailableGPUsResponse) {}

  // Request a virtual GPU with specific requirements
  rpc RequestVirtualGPU(RequestVirtualGPURequest) returns (RequestVirtualGPUResponse) {}

  rpc GetHealth(GetHealthRequest) returns (GetHealthResponse) {}

  rpc ReleaseVirtualGPU(ReleaseVirtualGPURequest) returns (ReleaseVirtualGPUResponse) {}

  rpc EnableMPS(EnableMPSRequest) returns (EnableMPSResponse) {}

  rpc DisableMPS(DisableMPSRequest) returns (DisableMPSResponse) {}

  // Update MPS configurations for a device
  rpc UpdateMPSConfigs(UpdateMPSConfigsRequest) returns (UpdateMPSConfigsResponse) {}
}
