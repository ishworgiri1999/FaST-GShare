// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/seti/configurator.proto

package seti

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GPUConfigurator_GetAvailableGPUs_FullMethodName  = "/seti.GPUConfigurator/GetAvailableGPUs"
	GPUConfigurator_RequestVirtualGPU_FullMethodName = "/seti.GPUConfigurator/RequestVirtualGPU"
)

// GPUConfiguratorClient is the client API for GPUConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for GPU resource management
type GPUConfiguratorClient interface {
	// Get available virtual GPUs
	GetAvailableGPUs(ctx context.Context, in *GetGPUsRequest, opts ...grpc.CallOption) (*GetGPUsResponse, error)
	// Request a virtual GPU with specific requirements
	RequestVirtualGPU(ctx context.Context, in *VirtualGPURequest, opts ...grpc.CallOption) (*VirtualGPU, error)
}

type gPUConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewGPUConfiguratorClient(cc grpc.ClientConnInterface) GPUConfiguratorClient {
	return &gPUConfiguratorClient{cc}
}

func (c *gPUConfiguratorClient) GetAvailableGPUs(ctx context.Context, in *GetGPUsRequest, opts ...grpc.CallOption) (*GetGPUsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGPUsResponse)
	err := c.cc.Invoke(ctx, GPUConfigurator_GetAvailableGPUs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorClient) RequestVirtualGPU(ctx context.Context, in *VirtualGPURequest, opts ...grpc.CallOption) (*VirtualGPU, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualGPU)
	err := c.cc.Invoke(ctx, GPUConfigurator_RequestVirtualGPU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPUConfiguratorServer is the server API for GPUConfigurator service.
// All implementations must embed UnimplementedGPUConfiguratorServer
// for forward compatibility.
//
// Service definition for GPU resource management
type GPUConfiguratorServer interface {
	// Get available virtual GPUs
	GetAvailableGPUs(context.Context, *GetGPUsRequest) (*GetGPUsResponse, error)
	// Request a virtual GPU with specific requirements
	RequestVirtualGPU(context.Context, *VirtualGPURequest) (*VirtualGPU, error)
	mustEmbedUnimplementedGPUConfiguratorServer()
}

// UnimplementedGPUConfiguratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGPUConfiguratorServer struct{}

func (UnimplementedGPUConfiguratorServer) GetAvailableGPUs(context.Context, *GetGPUsRequest) (*GetGPUsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableGPUs not implemented")
}
func (UnimplementedGPUConfiguratorServer) RequestVirtualGPU(context.Context, *VirtualGPURequest) (*VirtualGPU, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVirtualGPU not implemented")
}
func (UnimplementedGPUConfiguratorServer) mustEmbedUnimplementedGPUConfiguratorServer() {}
func (UnimplementedGPUConfiguratorServer) testEmbeddedByValue()                         {}

// UnsafeGPUConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPUConfiguratorServer will
// result in compilation errors.
type UnsafeGPUConfiguratorServer interface {
	mustEmbedUnimplementedGPUConfiguratorServer()
}

func RegisterGPUConfiguratorServer(s grpc.ServiceRegistrar, srv GPUConfiguratorServer) {
	// If the following call pancis, it indicates UnimplementedGPUConfiguratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GPUConfigurator_ServiceDesc, srv)
}

func _GPUConfigurator_GetAvailableGPUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGPUsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServer).GetAvailableGPUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfigurator_GetAvailableGPUs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServer).GetAvailableGPUs(ctx, req.(*GetGPUsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfigurator_RequestVirtualGPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualGPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServer).RequestVirtualGPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfigurator_RequestVirtualGPU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServer).RequestVirtualGPU(ctx, req.(*VirtualGPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPUConfigurator_ServiceDesc is the grpc.ServiceDesc for GPUConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPUConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seti.GPUConfigurator",
	HandlerType: (*GPUConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableGPUs",
			Handler:    _GPUConfigurator_GetAvailableGPUs_Handler,
		},
		{
			MethodName: "RequestVirtualGPU",
			Handler:    _GPUConfigurator_RequestVirtualGPU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/seti/configurator.proto",
}
