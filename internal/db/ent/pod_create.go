// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/pod"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/resource"
	"github.com/google/uuid"
)

// PodCreate is the builder for creating a Pod entity.
type PodCreate struct {
	config
	mutation *PodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PodCreate) SetCreatedAt(t time.Time) *PodCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PodCreate) SetNillableCreatedAt(t *time.Time) *PodCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PodCreate) SetName(s string) *PodCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetResourceID sets the "resource_id" field.
func (pc *PodCreate) SetResourceID(s string) *PodCreate {
	pc.mutation.SetResourceID(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PodCreate) SetID(u uuid.UUID) *PodCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PodCreate) SetNillableID(u *uuid.UUID) *PodCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddResourceIDs adds the "resource" edge to the Resource entity by IDs.
func (pc *PodCreate) AddResourceIDs(ids ...uuid.UUID) *PodCreate {
	pc.mutation.AddResourceIDs(ids...)
	return pc
}

// AddResource adds the "resource" edges to the Resource entity.
func (pc *PodCreate) AddResource(r ...*Resource) *PodCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddResourceIDs(ids...)
}

// Mutation returns the PodMutation object of the builder.
func (pc *PodCreate) Mutation() *PodMutation {
	return pc.mutation
}

// Save creates the Pod in the database.
func (pc *PodCreate) Save(ctx context.Context) (*Pod, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PodCreate) SaveX(ctx context.Context) *Pod {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PodCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PodCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PodCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pod.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := pod.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PodCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pod.created_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Pod.name"`)}
	}
	if _, ok := pc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "Pod.resource_id"`)}
	}
	return nil
}

func (pc *PodCreate) sqlSave(ctx context.Context) (*Pod, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PodCreate) createSpec() (*Pod, *sqlgraph.CreateSpec) {
	var (
		_node = &Pod{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pod.Table, sqlgraph.NewFieldSpec(pod.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(pod.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.ResourceID(); ok {
		_spec.SetField(pod.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if nodes := pc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pod.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PodCreate) OnConflict(opts ...sql.ConflictOption) *PodUpsertOne {
	pc.conflict = opts
	return &PodUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PodCreate) OnConflictColumns(columns ...string) *PodUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PodUpsertOne{
		create: pc,
	}
}

type (
	// PodUpsertOne is the builder for "upsert"-ing
	//  one Pod node.
	PodUpsertOne struct {
		create *PodCreate
	}

	// PodUpsert is the "OnConflict" setter.
	PodUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PodUpsert) SetName(v string) *PodUpsert {
	u.Set(pod.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PodUpsert) UpdateName() *PodUpsert {
	u.SetExcluded(pod.FieldName)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *PodUpsert) SetResourceID(v string) *PodUpsert {
	u.Set(pod.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *PodUpsert) UpdateResourceID() *PodUpsert {
	u.SetExcluded(pod.FieldResourceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Pod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PodUpsertOne) UpdateNewValues() *PodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pod.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pod.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pod.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PodUpsertOne) Ignore() *PodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PodUpsertOne) DoNothing() *PodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PodCreate.OnConflict
// documentation for more info.
func (u *PodUpsertOne) Update(set func(*PodUpsert)) *PodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PodUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PodUpsertOne) SetName(v string) *PodUpsertOne {
	return u.Update(func(s *PodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PodUpsertOne) UpdateName() *PodUpsertOne {
	return u.Update(func(s *PodUpsert) {
		s.UpdateName()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *PodUpsertOne) SetResourceID(v string) *PodUpsertOne {
	return u.Update(func(s *PodUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *PodUpsertOne) UpdateResourceID() *PodUpsertOne {
	return u.Update(func(s *PodUpsert) {
		s.UpdateResourceID()
	})
}

// Exec executes the query.
func (u *PodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PodUpsertOne.ID is not supported by MySQL driver. Use PodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PodCreateBulk is the builder for creating many Pod entities in bulk.
type PodCreateBulk struct {
	config
	err      error
	builders []*PodCreate
	conflict []sql.ConflictOption
}

// Save creates the Pod entities in the database.
func (pcb *PodCreateBulk) Save(ctx context.Context) ([]*Pod, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pod, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PodCreateBulk) SaveX(ctx context.Context) []*Pod {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PodCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PodCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pod.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PodCreateBulk) OnConflict(opts ...sql.ConflictOption) *PodUpsertBulk {
	pcb.conflict = opts
	return &PodUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PodCreateBulk) OnConflictColumns(columns ...string) *PodUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PodUpsertBulk{
		create: pcb,
	}
}

// PodUpsertBulk is the builder for "upsert"-ing
// a bulk of Pod nodes.
type PodUpsertBulk struct {
	create *PodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PodUpsertBulk) UpdateNewValues() *PodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pod.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pod.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pod.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PodUpsertBulk) Ignore() *PodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PodUpsertBulk) DoNothing() *PodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PodCreateBulk.OnConflict
// documentation for more info.
func (u *PodUpsertBulk) Update(set func(*PodUpsert)) *PodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PodUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PodUpsertBulk) SetName(v string) *PodUpsertBulk {
	return u.Update(func(s *PodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PodUpsertBulk) UpdateName() *PodUpsertBulk {
	return u.Update(func(s *PodUpsert) {
		s.UpdateName()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *PodUpsertBulk) SetResourceID(v string) *PodUpsertBulk {
	return u.Update(func(s *PodUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *PodUpsertBulk) UpdateResourceID() *PodUpsertBulk {
	return u.Update(func(s *PodUpsert) {
		s.UpdateResourceID()
	})
}

// Exec executes the query.
func (u *PodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
