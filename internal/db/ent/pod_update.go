// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/pod"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/predicate"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/resource"
	"github.com/google/uuid"
)

// PodUpdate is the builder for updating Pod entities.
type PodUpdate struct {
	config
	hooks     []Hook
	mutation  *PodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PodUpdate builder.
func (pu *PodUpdate) Where(ps ...predicate.Pod) *PodUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PodUpdate) SetName(s string) *PodUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PodUpdate) SetNillableName(s *string) *PodUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetResourceID sets the "resource_id" field.
func (pu *PodUpdate) SetResourceID(s string) *PodUpdate {
	pu.mutation.SetResourceID(s)
	return pu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (pu *PodUpdate) SetNillableResourceID(s *string) *PodUpdate {
	if s != nil {
		pu.SetResourceID(*s)
	}
	return pu
}

// AddResourceIDs adds the "resource" edge to the Resource entity by IDs.
func (pu *PodUpdate) AddResourceIDs(ids ...uuid.UUID) *PodUpdate {
	pu.mutation.AddResourceIDs(ids...)
	return pu
}

// AddResource adds the "resource" edges to the Resource entity.
func (pu *PodUpdate) AddResource(r ...*Resource) *PodUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddResourceIDs(ids...)
}

// Mutation returns the PodMutation object of the builder.
func (pu *PodUpdate) Mutation() *PodMutation {
	return pu.mutation
}

// ClearResource clears all "resource" edges to the Resource entity.
func (pu *PodUpdate) ClearResource() *PodUpdate {
	pu.mutation.ClearResource()
	return pu
}

// RemoveResourceIDs removes the "resource" edge to Resource entities by IDs.
func (pu *PodUpdate) RemoveResourceIDs(ids ...uuid.UUID) *PodUpdate {
	pu.mutation.RemoveResourceIDs(ids...)
	return pu
}

// RemoveResource removes "resource" edges to Resource entities.
func (pu *PodUpdate) RemoveResource(r ...*Resource) *PodUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveResourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PodUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PodUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PodUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PodUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pod.Table, pod.Columns, sqlgraph.NewFieldSpec(pod.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(pod.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.ResourceID(); ok {
		_spec.SetField(pod.FieldResourceID, field.TypeString, value)
	}
	if pu.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedResourceIDs(); len(nodes) > 0 && !pu.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PodUpdateOne is the builder for updating a single Pod entity.
type PodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (puo *PodUpdateOne) SetName(s string) *PodUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PodUpdateOne) SetNillableName(s *string) *PodUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetResourceID sets the "resource_id" field.
func (puo *PodUpdateOne) SetResourceID(s string) *PodUpdateOne {
	puo.mutation.SetResourceID(s)
	return puo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (puo *PodUpdateOne) SetNillableResourceID(s *string) *PodUpdateOne {
	if s != nil {
		puo.SetResourceID(*s)
	}
	return puo
}

// AddResourceIDs adds the "resource" edge to the Resource entity by IDs.
func (puo *PodUpdateOne) AddResourceIDs(ids ...uuid.UUID) *PodUpdateOne {
	puo.mutation.AddResourceIDs(ids...)
	return puo
}

// AddResource adds the "resource" edges to the Resource entity.
func (puo *PodUpdateOne) AddResource(r ...*Resource) *PodUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddResourceIDs(ids...)
}

// Mutation returns the PodMutation object of the builder.
func (puo *PodUpdateOne) Mutation() *PodMutation {
	return puo.mutation
}

// ClearResource clears all "resource" edges to the Resource entity.
func (puo *PodUpdateOne) ClearResource() *PodUpdateOne {
	puo.mutation.ClearResource()
	return puo
}

// RemoveResourceIDs removes the "resource" edge to Resource entities by IDs.
func (puo *PodUpdateOne) RemoveResourceIDs(ids ...uuid.UUID) *PodUpdateOne {
	puo.mutation.RemoveResourceIDs(ids...)
	return puo
}

// RemoveResource removes "resource" edges to Resource entities.
func (puo *PodUpdateOne) RemoveResource(r ...*Resource) *PodUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveResourceIDs(ids...)
}

// Where appends a list predicates to the PodUpdate builder.
func (puo *PodUpdateOne) Where(ps ...predicate.Pod) *PodUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PodUpdateOne) Select(field string, fields ...string) *PodUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pod entity.
func (puo *PodUpdateOne) Save(ctx context.Context) (*Pod, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PodUpdateOne) SaveX(ctx context.Context) *Pod {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PodUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PodUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PodUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PodUpdateOne) sqlSave(ctx context.Context) (_node *Pod, err error) {
	_spec := sqlgraph.NewUpdateSpec(pod.Table, pod.Columns, sqlgraph.NewFieldSpec(pod.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pod.FieldID)
		for _, f := range fields {
			if !pod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(pod.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.ResourceID(); ok {
		_spec.SetField(pod.FieldResourceID, field.TypeString, value)
	}
	if puo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedResourceIDs(); len(nodes) > 0 && !puo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pod.ResourceTable,
			Columns: pod.ResourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Pod{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
