// Code generated by ent, DO NOT EDIT.

package resource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resource type in the database.
	Label = "resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldNodeName holds the string denoting the node_name field in the database.
	FieldNodeName = "node_name"
	// EdgePods holds the string denoting the pods edge name in mutations.
	EdgePods = "pods"
	// Table holds the table name of the resource in the database.
	Table = "resources"
	// PodsTable is the table that holds the pods relation/edge. The primary key declared below.
	PodsTable = "pod_resource"
	// PodsInverseTable is the table name for the Pod entity.
	// It exists in this package in order to avoid circular dependency with the "pod" package.
	PodsInverseTable = "pods"
)

// Columns holds all SQL columns for resource fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldNodeName,
}

var (
	// PodsPrimaryKey and PodsColumn2 are the table columns denoting the
	// primary key for the pods relation (M2M).
	PodsPrimaryKey = []string{"pod_id", "resource_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Resource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByNodeName orders the results by the node_name field.
func ByNodeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeName, opts...).ToFunc()
}

// ByPodsCount orders the results by pods count.
func ByPodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPodsStep(), opts...)
	}
}

// ByPods orders the results by pods terms.
func ByPods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PodsTable, PodsPrimaryKey...),
	)
}
