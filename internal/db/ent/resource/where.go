// Code generated by ent, DO NOT EDIT.

package resource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreatedAt, v))
}

// NodeName applies equality check predicate on the "node_name" field. It's identical to NodeNameEQ.
func NodeName(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldNodeName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldCreatedAt, v))
}

// NodeNameEQ applies the EQ predicate on the "node_name" field.
func NodeNameEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldNodeName, v))
}

// NodeNameNEQ applies the NEQ predicate on the "node_name" field.
func NodeNameNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldNodeName, v))
}

// NodeNameIn applies the In predicate on the "node_name" field.
func NodeNameIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldNodeName, vs...))
}

// NodeNameNotIn applies the NotIn predicate on the "node_name" field.
func NodeNameNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldNodeName, vs...))
}

// NodeNameGT applies the GT predicate on the "node_name" field.
func NodeNameGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldNodeName, v))
}

// NodeNameGTE applies the GTE predicate on the "node_name" field.
func NodeNameGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldNodeName, v))
}

// NodeNameLT applies the LT predicate on the "node_name" field.
func NodeNameLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldNodeName, v))
}

// NodeNameLTE applies the LTE predicate on the "node_name" field.
func NodeNameLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldNodeName, v))
}

// NodeNameContains applies the Contains predicate on the "node_name" field.
func NodeNameContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldNodeName, v))
}

// NodeNameHasPrefix applies the HasPrefix predicate on the "node_name" field.
func NodeNameHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldNodeName, v))
}

// NodeNameHasSuffix applies the HasSuffix predicate on the "node_name" field.
func NodeNameHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldNodeName, v))
}

// NodeNameEqualFold applies the EqualFold predicate on the "node_name" field.
func NodeNameEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldNodeName, v))
}

// NodeNameContainsFold applies the ContainsFold predicate on the "node_name" field.
func NodeNameContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldNodeName, v))
}

// HasPods applies the HasEdge predicate on the "pods" edge.
func HasPods() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PodsTable, PodsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPodsWith applies the HasEdge predicate on the "pods" edge with a given conditions (other predicates).
func HasPodsWith(preds ...predicate.Pod) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newPodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.NotPredicates(p))
}
