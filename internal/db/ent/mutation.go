// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/pod"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/predicate"
	"github.com/KontonGu/FaST-GShare/internal/db/ent/resource"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePod      = "Pod"
	TypeResource = "Resource"
)

// PodMutation represents an operation that mutates the Pod nodes in the graph.
type PodMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	name            *string
	resource_id     *string
	clearedFields   map[string]struct{}
	resource        map[uuid.UUID]struct{}
	removedresource map[uuid.UUID]struct{}
	clearedresource bool
	done            bool
	oldValue        func(context.Context) (*Pod, error)
	predicates      []predicate.Pod
}

var _ ent.Mutation = (*PodMutation)(nil)

// podOption allows management of the mutation configuration using functional options.
type podOption func(*PodMutation)

// newPodMutation creates new mutation for the Pod entity.
func newPodMutation(c config, op Op, opts ...podOption) *PodMutation {
	m := &PodMutation{
		config:        c,
		op:            op,
		typ:           TypePod,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPodID sets the ID field of the mutation.
func withPodID(id uuid.UUID) podOption {
	return func(m *PodMutation) {
		var (
			err   error
			once  sync.Once
			value *Pod
		)
		m.oldValue = func(ctx context.Context) (*Pod, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pod.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPod sets the old Pod of the mutation.
func withPod(node *Pod) podOption {
	return func(m *PodMutation) {
		m.oldValue = func(context.Context) (*Pod, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pod entities.
func (m *PodMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PodMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PodMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pod.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PodMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PodMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Pod entity.
// If the Pod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PodMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PodMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *PodMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PodMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pod entity.
// If the Pod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PodMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PodMutation) ResetName() {
	m.name = nil
}

// SetResourceID sets the "resource_id" field.
func (m *PodMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *PodMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the Pod entity.
// If the Pod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PodMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *PodMutation) ResetResourceID() {
	m.resource_id = nil
}

// AddResourceIDs adds the "resource" edge to the Resource entity by ids.
func (m *PodMutation) AddResourceIDs(ids ...uuid.UUID) {
	if m.resource == nil {
		m.resource = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.resource[ids[i]] = struct{}{}
	}
}

// ClearResource clears the "resource" edge to the Resource entity.
func (m *PodMutation) ClearResource() {
	m.clearedresource = true
}

// ResourceCleared reports if the "resource" edge to the Resource entity was cleared.
func (m *PodMutation) ResourceCleared() bool {
	return m.clearedresource
}

// RemoveResourceIDs removes the "resource" edge to the Resource entity by IDs.
func (m *PodMutation) RemoveResourceIDs(ids ...uuid.UUID) {
	if m.removedresource == nil {
		m.removedresource = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.resource, ids[i])
		m.removedresource[ids[i]] = struct{}{}
	}
}

// RemovedResource returns the removed IDs of the "resource" edge to the Resource entity.
func (m *PodMutation) RemovedResourceIDs() (ids []uuid.UUID) {
	for id := range m.removedresource {
		ids = append(ids, id)
	}
	return
}

// ResourceIDs returns the "resource" edge IDs in the mutation.
func (m *PodMutation) ResourceIDs() (ids []uuid.UUID) {
	for id := range m.resource {
		ids = append(ids, id)
	}
	return
}

// ResetResource resets all changes to the "resource" edge.
func (m *PodMutation) ResetResource() {
	m.resource = nil
	m.clearedresource = false
	m.removedresource = nil
}

// Where appends a list predicates to the PodMutation builder.
func (m *PodMutation) Where(ps ...predicate.Pod) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PodMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PodMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pod, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PodMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PodMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pod).
func (m *PodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PodMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, pod.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, pod.FieldName)
	}
	if m.resource_id != nil {
		fields = append(fields, pod.FieldResourceID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pod.FieldCreatedAt:
		return m.CreatedAt()
	case pod.FieldName:
		return m.Name()
	case pod.FieldResourceID:
		return m.ResourceID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pod.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pod.FieldName:
		return m.OldName(ctx)
	case pod.FieldResourceID:
		return m.OldResourceID(ctx)
	}
	return nil, fmt.Errorf("unknown Pod field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pod.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pod.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pod.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	}
	return fmt.Errorf("unknown Pod field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PodMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PodMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PodMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pod numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pod nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PodMutation) ResetField(name string) error {
	switch name {
	case pod.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pod.FieldName:
		m.ResetName()
		return nil
	case pod.FieldResourceID:
		m.ResetResourceID()
		return nil
	}
	return fmt.Errorf("unknown Pod field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PodMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.resource != nil {
		edges = append(edges, pod.EdgeResource)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pod.EdgeResource:
		ids := make([]ent.Value, 0, len(m.resource))
		for id := range m.resource {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedresource != nil {
		edges = append(edges, pod.EdgeResource)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pod.EdgeResource:
		ids := make([]ent.Value, 0, len(m.removedresource))
		for id := range m.removedresource {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedresource {
		edges = append(edges, pod.EdgeResource)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PodMutation) EdgeCleared(name string) bool {
	switch name {
	case pod.EdgeResource:
		return m.clearedresource
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PodMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pod unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PodMutation) ResetEdge(name string) error {
	switch name {
	case pod.EdgeResource:
		m.ResetResource()
		return nil
	}
	return fmt.Errorf("unknown Pod edge %s", name)
}

// ResourceMutation represents an operation that mutates the Resource nodes in the graph.
type ResourceMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	node_name     *string
	clearedFields map[string]struct{}
	pods          map[uuid.UUID]struct{}
	removedpods   map[uuid.UUID]struct{}
	clearedpods   bool
	done          bool
	oldValue      func(context.Context) (*Resource, error)
	predicates    []predicate.Resource
}

var _ ent.Mutation = (*ResourceMutation)(nil)

// resourceOption allows management of the mutation configuration using functional options.
type resourceOption func(*ResourceMutation)

// newResourceMutation creates new mutation for the Resource entity.
func newResourceMutation(c config, op Op, opts ...resourceOption) *ResourceMutation {
	m := &ResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResourceID sets the ID field of the mutation.
func withResourceID(id uuid.UUID) resourceOption {
	return func(m *ResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Resource
		)
		m.oldValue = func(ctx context.Context) (*Resource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Resource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResource sets the old Resource of the mutation.
func withResource(node *Resource) resourceOption {
	return func(m *ResourceMutation) {
		m.oldValue = func(context.Context) (*Resource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Resource entities.
func (m *ResourceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResourceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResourceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Resource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ResourceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ResourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ResourceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetNodeName sets the "node_name" field.
func (m *ResourceMutation) SetNodeName(s string) {
	m.node_name = &s
}

// NodeName returns the value of the "node_name" field in the mutation.
func (m *ResourceMutation) NodeName() (r string, exists bool) {
	v := m.node_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeName returns the old "node_name" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldNodeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNodeName: %w", err)
	}
	return oldValue.NodeName, nil
}

// ResetNodeName resets all changes to the "node_name" field.
func (m *ResourceMutation) ResetNodeName() {
	m.node_name = nil
}

// AddPodIDs adds the "pods" edge to the Pod entity by ids.
func (m *ResourceMutation) AddPodIDs(ids ...uuid.UUID) {
	if m.pods == nil {
		m.pods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.pods[ids[i]] = struct{}{}
	}
}

// ClearPods clears the "pods" edge to the Pod entity.
func (m *ResourceMutation) ClearPods() {
	m.clearedpods = true
}

// PodsCleared reports if the "pods" edge to the Pod entity was cleared.
func (m *ResourceMutation) PodsCleared() bool {
	return m.clearedpods
}

// RemovePodIDs removes the "pods" edge to the Pod entity by IDs.
func (m *ResourceMutation) RemovePodIDs(ids ...uuid.UUID) {
	if m.removedpods == nil {
		m.removedpods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.pods, ids[i])
		m.removedpods[ids[i]] = struct{}{}
	}
}

// RemovedPods returns the removed IDs of the "pods" edge to the Pod entity.
func (m *ResourceMutation) RemovedPodsIDs() (ids []uuid.UUID) {
	for id := range m.removedpods {
		ids = append(ids, id)
	}
	return
}

// PodsIDs returns the "pods" edge IDs in the mutation.
func (m *ResourceMutation) PodsIDs() (ids []uuid.UUID) {
	for id := range m.pods {
		ids = append(ids, id)
	}
	return
}

// ResetPods resets all changes to the "pods" edge.
func (m *ResourceMutation) ResetPods() {
	m.pods = nil
	m.clearedpods = false
	m.removedpods = nil
}

// Where appends a list predicates to the ResourceMutation builder.
func (m *ResourceMutation) Where(ps ...predicate.Resource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Resource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Resource).
func (m *ResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResourceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, resource.FieldCreatedAt)
	}
	if m.node_name != nil {
		fields = append(fields, resource.FieldNodeName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resource.FieldCreatedAt:
		return m.CreatedAt()
	case resource.FieldNodeName:
		return m.NodeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case resource.FieldNodeName:
		return m.OldNodeName(ctx)
	}
	return nil, fmt.Errorf("unknown Resource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case resource.FieldNodeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNodeName(v)
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Resource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResourceMutation) ResetField(name string) error {
	switch name {
	case resource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case resource.FieldNodeName:
		m.ResetNodeName()
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.pods != nil {
		edges = append(edges, resource.EdgePods)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgePods:
		ids := make([]ent.Value, 0, len(m.pods))
		for id := range m.pods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpods != nil {
		edges = append(edges, resource.EdgePods)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgePods:
		ids := make([]ent.Value, 0, len(m.removedpods))
		for id := range m.removedpods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpods {
		edges = append(edges, resource.EdgePods)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case resource.EdgePods:
		return m.clearedpods
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResourceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResourceMutation) ResetEdge(name string) error {
	switch name {
	case resource.EdgePods:
		m.ResetPods()
		return nil
	}
	return fmt.Errorf("unknown Resource edge %s", name)
}
