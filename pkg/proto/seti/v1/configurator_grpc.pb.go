// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/proto/seti/v1/configurator.proto

package seti

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GPUConfiguratorService_GetAvailableGPUs_FullMethodName  = "/seti.v1.GPUConfiguratorService/GetAvailableGPUs"
	GPUConfiguratorService_RequestVirtualGPU_FullMethodName = "/seti.v1.GPUConfiguratorService/RequestVirtualGPU"
	GPUConfiguratorService_GetHealth_FullMethodName         = "/seti.v1.GPUConfiguratorService/GetHealth"
	GPUConfiguratorService_ReleaseVirtualGPU_FullMethodName = "/seti.v1.GPUConfiguratorService/ReleaseVirtualGPU"
	GPUConfiguratorService_GetGPU_FullMethodName            = "/seti.v1.GPUConfiguratorService/GetGPU"
	GPUConfiguratorService_EnableMPS_FullMethodName         = "/seti.v1.GPUConfiguratorService/EnableMPS"
	GPUConfiguratorService_DisableMPS_FullMethodName        = "/seti.v1.GPUConfiguratorService/DisableMPS"
	GPUConfiguratorService_UpdateMPSConfigs_FullMethodName  = "/seti.v1.GPUConfiguratorService/UpdateMPSConfigs"
)

// GPUConfiguratorServiceClient is the client API for GPUConfiguratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for GPU resource management
type GPUConfiguratorServiceClient interface {
	// Get available virtual GPUs
	GetAvailableGPUs(ctx context.Context, in *GetAvailableGPUsRequest, opts ...grpc.CallOption) (*GetAvailableGPUsResponse, error)
	// Request a virtual GPU with specific requirements
	RequestVirtualGPU(ctx context.Context, in *RequestVirtualGPURequest, opts ...grpc.CallOption) (*RequestVirtualGPUResponse, error)
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
	ReleaseVirtualGPU(ctx context.Context, in *ReleaseVirtualGPURequest, opts ...grpc.CallOption) (*ReleaseVirtualGPUResponse, error)
	GetGPU(ctx context.Context, in *GetGPURequest, opts ...grpc.CallOption) (*GetGPUResponse, error)
	EnableMPS(ctx context.Context, in *EnableMPSRequest, opts ...grpc.CallOption) (*EnableMPSResponse, error)
	DisableMPS(ctx context.Context, in *DisableMPSRequest, opts ...grpc.CallOption) (*DisableMPSResponse, error)
	// Update MPS configurations for a device
	UpdateMPSConfigs(ctx context.Context, in *UpdateMPSConfigsRequest, opts ...grpc.CallOption) (*UpdateMPSConfigsResponse, error)
}

type gPUConfiguratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGPUConfiguratorServiceClient(cc grpc.ClientConnInterface) GPUConfiguratorServiceClient {
	return &gPUConfiguratorServiceClient{cc}
}

func (c *gPUConfiguratorServiceClient) GetAvailableGPUs(ctx context.Context, in *GetAvailableGPUsRequest, opts ...grpc.CallOption) (*GetAvailableGPUsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableGPUsResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_GetAvailableGPUs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) RequestVirtualGPU(ctx context.Context, in *RequestVirtualGPURequest, opts ...grpc.CallOption) (*RequestVirtualGPUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVirtualGPUResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_RequestVirtualGPU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) ReleaseVirtualGPU(ctx context.Context, in *ReleaseVirtualGPURequest, opts ...grpc.CallOption) (*ReleaseVirtualGPUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseVirtualGPUResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_ReleaseVirtualGPU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) GetGPU(ctx context.Context, in *GetGPURequest, opts ...grpc.CallOption) (*GetGPUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGPUResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_GetGPU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) EnableMPS(ctx context.Context, in *EnableMPSRequest, opts ...grpc.CallOption) (*EnableMPSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableMPSResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_EnableMPS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) DisableMPS(ctx context.Context, in *DisableMPSRequest, opts ...grpc.CallOption) (*DisableMPSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableMPSResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_DisableMPS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUConfiguratorServiceClient) UpdateMPSConfigs(ctx context.Context, in *UpdateMPSConfigsRequest, opts ...grpc.CallOption) (*UpdateMPSConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMPSConfigsResponse)
	err := c.cc.Invoke(ctx, GPUConfiguratorService_UpdateMPSConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPUConfiguratorServiceServer is the server API for GPUConfiguratorService service.
// All implementations must embed UnimplementedGPUConfiguratorServiceServer
// for forward compatibility.
//
// Service definition for GPU resource management
type GPUConfiguratorServiceServer interface {
	// Get available virtual GPUs
	GetAvailableGPUs(context.Context, *GetAvailableGPUsRequest) (*GetAvailableGPUsResponse, error)
	// Request a virtual GPU with specific requirements
	RequestVirtualGPU(context.Context, *RequestVirtualGPURequest) (*RequestVirtualGPUResponse, error)
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	ReleaseVirtualGPU(context.Context, *ReleaseVirtualGPURequest) (*ReleaseVirtualGPUResponse, error)
	GetGPU(context.Context, *GetGPURequest) (*GetGPUResponse, error)
	EnableMPS(context.Context, *EnableMPSRequest) (*EnableMPSResponse, error)
	DisableMPS(context.Context, *DisableMPSRequest) (*DisableMPSResponse, error)
	// Update MPS configurations for a device
	UpdateMPSConfigs(context.Context, *UpdateMPSConfigsRequest) (*UpdateMPSConfigsResponse, error)
	mustEmbedUnimplementedGPUConfiguratorServiceServer()
}

// UnimplementedGPUConfiguratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGPUConfiguratorServiceServer struct{}

func (UnimplementedGPUConfiguratorServiceServer) GetAvailableGPUs(context.Context, *GetAvailableGPUsRequest) (*GetAvailableGPUsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableGPUs not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) RequestVirtualGPU(context.Context, *RequestVirtualGPURequest) (*RequestVirtualGPUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVirtualGPU not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) ReleaseVirtualGPU(context.Context, *ReleaseVirtualGPURequest) (*ReleaseVirtualGPUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseVirtualGPU not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) GetGPU(context.Context, *GetGPURequest) (*GetGPUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGPU not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) EnableMPS(context.Context, *EnableMPSRequest) (*EnableMPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMPS not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) DisableMPS(context.Context, *DisableMPSRequest) (*DisableMPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMPS not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) UpdateMPSConfigs(context.Context, *UpdateMPSConfigsRequest) (*UpdateMPSConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMPSConfigs not implemented")
}
func (UnimplementedGPUConfiguratorServiceServer) mustEmbedUnimplementedGPUConfiguratorServiceServer() {
}
func (UnimplementedGPUConfiguratorServiceServer) testEmbeddedByValue() {}

// UnsafeGPUConfiguratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPUConfiguratorServiceServer will
// result in compilation errors.
type UnsafeGPUConfiguratorServiceServer interface {
	mustEmbedUnimplementedGPUConfiguratorServiceServer()
}

func RegisterGPUConfiguratorServiceServer(s grpc.ServiceRegistrar, srv GPUConfiguratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedGPUConfiguratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GPUConfiguratorService_ServiceDesc, srv)
}

func _GPUConfiguratorService_GetAvailableGPUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableGPUsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).GetAvailableGPUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_GetAvailableGPUs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).GetAvailableGPUs(ctx, req.(*GetAvailableGPUsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_RequestVirtualGPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVirtualGPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).RequestVirtualGPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_RequestVirtualGPU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).RequestVirtualGPU(ctx, req.(*RequestVirtualGPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_ReleaseVirtualGPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseVirtualGPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).ReleaseVirtualGPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_ReleaseVirtualGPU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).ReleaseVirtualGPU(ctx, req.(*ReleaseVirtualGPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_GetGPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).GetGPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_GetGPU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).GetGPU(ctx, req.(*GetGPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_EnableMPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).EnableMPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_EnableMPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).EnableMPS(ctx, req.(*EnableMPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_DisableMPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).DisableMPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_DisableMPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).DisableMPS(ctx, req.(*DisableMPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUConfiguratorService_UpdateMPSConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMPSConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUConfiguratorServiceServer).UpdateMPSConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUConfiguratorService_UpdateMPSConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUConfiguratorServiceServer).UpdateMPSConfigs(ctx, req.(*UpdateMPSConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPUConfiguratorService_ServiceDesc is the grpc.ServiceDesc for GPUConfiguratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPUConfiguratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seti.v1.GPUConfiguratorService",
	HandlerType: (*GPUConfiguratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableGPUs",
			Handler:    _GPUConfiguratorService_GetAvailableGPUs_Handler,
		},
		{
			MethodName: "RequestVirtualGPU",
			Handler:    _GPUConfiguratorService_RequestVirtualGPU_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _GPUConfiguratorService_GetHealth_Handler,
		},
		{
			MethodName: "ReleaseVirtualGPU",
			Handler:    _GPUConfiguratorService_ReleaseVirtualGPU_Handler,
		},
		{
			MethodName: "GetGPU",
			Handler:    _GPUConfiguratorService_GetGPU_Handler,
		},
		{
			MethodName: "EnableMPS",
			Handler:    _GPUConfiguratorService_EnableMPS_Handler,
		},
		{
			MethodName: "DisableMPS",
			Handler:    _GPUConfiguratorService_DisableMPS_Handler,
		},
		{
			MethodName: "UpdateMPSConfigs",
			Handler:    _GPUConfiguratorService_UpdateMPSConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/seti/v1/configurator.proto",
}
