// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: pkg/proto/seti/v1/configurator.proto

package seti

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Empty request for getting available GPUs
type GetAvailableGPUsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAvailableGPUsRequest) Reset() {
	*x = GetAvailableGPUsRequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableGPUsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableGPUsRequest) ProtoMessage() {}

func (x *GetAvailableGPUsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableGPUsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableGPUsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{0}
}

// Response containing list of available GPUs
type GetAvailableGPUsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gpus      []*VirtualGPU `protobuf:"bytes,1,rep,name=gpus,proto3" json:"gpus,omitempty"`
	GpusInUse []*VirtualGPU `protobuf:"bytes,2,rep,name=gpus_in_use,json=gpusInUse,proto3" json:"gpus_in_use,omitempty"`
}

func (x *GetAvailableGPUsResponse) Reset() {
	*x = GetAvailableGPUsResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableGPUsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableGPUsResponse) ProtoMessage() {}

func (x *GetAvailableGPUsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableGPUsResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableGPUsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{1}
}

func (x *GetAvailableGPUsResponse) GetGpus() []*VirtualGPU {
	if x != nil {
		return x.Gpus
	}
	return nil
}

func (x *GetAvailableGPUsResponse) GetGpusInUse() []*VirtualGPU {
	if x != nil {
		return x.GpusInUse
	}
	return nil
}

// Message representing a virtual GPU
type VirtualGPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profileid           *uint32 `protobuf:"varint,6,opt,name=profileid,proto3,oneof" json:"profileid,omitempty"`
	Id                  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceIndex         int32   `protobuf:"varint,2,opt,name=device_index,json=deviceIndex,proto3" json:"device_index,omitempty"`
	MemoryBytes         uint64  `protobuf:"varint,3,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	MultiprocessorCount int32   `protobuf:"varint,4,opt,name=multiprocessor_count,json=multiprocessorCount,proto3" json:"multiprocessor_count,omitempty"`
	IsProvisioned       bool    `protobuf:"varint,5,opt,name=is_provisioned,json=isProvisioned,proto3" json:"is_provisioned,omitempty"`
	IsPhysical          bool    `protobuf:"varint,9,opt,name=is_physical,json=isPhysical,proto3" json:"is_physical,omitempty"`
	PhysicalGpuType     string  `protobuf:"bytes,10,opt,name=physical_gpu_type,json=physicalGpuType,proto3" json:"physical_gpu_type,omitempty"`
	SmPercentage        int32   `protobuf:"varint,11,opt,name=sm_percentage,json=smPercentage,proto3" json:"sm_percentage,omitempty"` //0-100 (for mig gpu) for other gpus it is 100
	ProvisionedGpu      *GPU    `protobuf:"bytes,7,opt,name=provisioned_gpu,json=provisionedGpu,proto3,oneof" json:"provisioned_gpu,omitempty"`
}

func (x *VirtualGPU) Reset() {
	*x = VirtualGPU{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualGPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGPU) ProtoMessage() {}

func (x *VirtualGPU) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGPU.ProtoReflect.Descriptor instead.
func (*VirtualGPU) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualGPU) GetProfileid() uint32 {
	if x != nil && x.Profileid != nil {
		return *x.Profileid
	}
	return 0
}

func (x *VirtualGPU) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualGPU) GetDeviceIndex() int32 {
	if x != nil {
		return x.DeviceIndex
	}
	return 0
}

func (x *VirtualGPU) GetMemoryBytes() uint64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *VirtualGPU) GetMultiprocessorCount() int32 {
	if x != nil {
		return x.MultiprocessorCount
	}
	return 0
}

func (x *VirtualGPU) GetIsProvisioned() bool {
	if x != nil {
		return x.IsProvisioned
	}
	return false
}

func (x *VirtualGPU) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

func (x *VirtualGPU) GetPhysicalGpuType() string {
	if x != nil {
		return x.PhysicalGpuType
	}
	return ""
}

func (x *VirtualGPU) GetSmPercentage() int32 {
	if x != nil {
		return x.SmPercentage
	}
	return 0
}

func (x *VirtualGPU) GetProvisionedGpu() *GPU {
	if x != nil {
		return x.ProvisionedGpu
	}
	return nil
}

// Message representing a physical GPU
type GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MemoryBytes         uint64     `protobuf:"varint,3,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	MultiprocessorCount int32      `protobuf:"varint,4,opt,name=multiprocessor_count,json=multiprocessorCount,proto3" json:"multiprocessor_count,omitempty"`
	ParentDeviceIndex   int32      `protobuf:"varint,5,opt,name=parent_device_index,json=parentDeviceIndex,proto3" json:"parent_device_index,omitempty"`
	ParentUuid          string     `protobuf:"bytes,6,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty"`
	MpsEnabled          bool       `protobuf:"varint,7,opt,name=mps_enabled,json=mpsEnabled,proto3" json:"mps_enabled,omitempty"`
	MpsConfig           *MPSConfig `protobuf:"bytes,8,opt,name=mps_config,json=mpsConfig,proto3,oneof" json:"mps_config,omitempty"`
}

func (x *GPU) Reset() {
	*x = GPU{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPU) ProtoMessage() {}

func (x *GPU) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPU.ProtoReflect.Descriptor instead.
func (*GPU) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{3}
}

func (x *GPU) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GPU) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GPU) GetMemoryBytes() uint64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *GPU) GetMultiprocessorCount() int32 {
	if x != nil {
		return x.MultiprocessorCount
	}
	return 0
}

func (x *GPU) GetParentDeviceIndex() int32 {
	if x != nil {
		return x.ParentDeviceIndex
	}
	return 0
}

func (x *GPU) GetParentUuid() string {
	if x != nil {
		return x.ParentUuid
	}
	return ""
}

func (x *GPU) GetMpsEnabled() bool {
	if x != nil {
		return x.MpsEnabled
	}
	return false
}

func (x *GPU) GetMpsConfig() *MPSConfig {
	if x != nil {
		return x.MpsConfig
	}
	return nil
}

type MPSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUuid string `protobuf:"bytes,1,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
	LogPath    string `protobuf:"bytes,2,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	TmpPath    string `protobuf:"bytes,3,opt,name=tmp_path,json=tmpPath,proto3" json:"tmp_path,omitempty"`
}

func (x *MPSConfig) Reset() {
	*x = MPSConfig{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPSConfig) ProtoMessage() {}

func (x *MPSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPSConfig.ProtoReflect.Descriptor instead.
func (*MPSConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{4}
}

func (x *MPSConfig) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *MPSConfig) GetLogPath() string {
	if x != nil {
		return x.LogPath
	}
	return ""
}

func (x *MPSConfig) GetTmpPath() string {
	if x != nil {
		return x.TmpPath
	}
	return ""
}

// Request for a virtual GPU with specific requirements
type RequestVirtualGPURequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profileid  *uint32 `protobuf:"varint,1,opt,name=profileid,proto3,oneof" json:"profileid,omitempty"`
	DeviceUuid *string `protobuf:"bytes,2,opt,name=device_uuid,json=deviceUuid,proto3,oneof" json:"device_uuid,omitempty"`
	UseMps     bool    `protobuf:"varint,3,opt,name=use_mps,json=useMps,proto3" json:"use_mps,omitempty"`
}

func (x *RequestVirtualGPURequest) Reset() {
	*x = RequestVirtualGPURequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVirtualGPURequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVirtualGPURequest) ProtoMessage() {}

func (x *RequestVirtualGPURequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVirtualGPURequest.ProtoReflect.Descriptor instead.
func (*RequestVirtualGPURequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{5}
}

func (x *RequestVirtualGPURequest) GetProfileid() uint32 {
	if x != nil && x.Profileid != nil {
		return *x.Profileid
	}
	return 0
}

func (x *RequestVirtualGPURequest) GetDeviceUuid() string {
	if x != nil && x.DeviceUuid != nil {
		return *x.DeviceUuid
	}
	return ""
}

func (x *RequestVirtualGPURequest) GetUseMps() bool {
	if x != nil {
		return x.UseMps
	}
	return false
}

type RequestVirtualGPUResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceIndex          int32         `protobuf:"varint,2,opt,name=device_index,json=deviceIndex,proto3" json:"device_index,omitempty"`
	MemoryBytes          uint64        `protobuf:"varint,3,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	MultiprocessorCount  int32         `protobuf:"varint,4,opt,name=multiprocessor_count,json=multiprocessorCount,proto3" json:"multiprocessor_count,omitempty"`
	ProvisionedGpu       *GPU          `protobuf:"bytes,7,opt,name=provisioned_gpu,json=provisionedGpu,proto3,oneof" json:"provisioned_gpu,omitempty"`
	AvailableVirtualGpus []*VirtualGPU `protobuf:"bytes,8,rep,name=available_virtual_gpus,json=availableVirtualGpus,proto3" json:"available_virtual_gpus,omitempty"`
}

func (x *RequestVirtualGPUResponse) Reset() {
	*x = RequestVirtualGPUResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVirtualGPUResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVirtualGPUResponse) ProtoMessage() {}

func (x *RequestVirtualGPUResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVirtualGPUResponse.ProtoReflect.Descriptor instead.
func (*RequestVirtualGPUResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{6}
}

func (x *RequestVirtualGPUResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestVirtualGPUResponse) GetDeviceIndex() int32 {
	if x != nil {
		return x.DeviceIndex
	}
	return 0
}

func (x *RequestVirtualGPUResponse) GetMemoryBytes() uint64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *RequestVirtualGPUResponse) GetMultiprocessorCount() int32 {
	if x != nil {
		return x.MultiprocessorCount
	}
	return 0
}

func (x *RequestVirtualGPUResponse) GetProvisionedGpu() *GPU {
	if x != nil {
		return x.ProvisionedGpu
	}
	return nil
}

func (x *RequestVirtualGPUResponse) GetAvailableVirtualGpus() []*VirtualGPU {
	if x != nil {
		return x.AvailableVirtualGpus
	}
	return nil
}

type GetHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHealthRequest) Reset() {
	*x = GetHealthRequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthRequest) ProtoMessage() {}

func (x *GetHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthRequest.ProtoReflect.Descriptor instead.
func (*GetHealthRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{7}
}

type GetHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy bool    `protobuf:"varint,2,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *GetHealthResponse) Reset() {
	*x = GetHealthResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthResponse) ProtoMessage() {}

func (x *GetHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthResponse.ProtoReflect.Descriptor instead.
func (*GetHealthResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{8}
}

func (x *GetHealthResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *GetHealthResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type FastPodGPUConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PodName is the name of the pod namespace+name
	Key           string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	QtRequest     float64 `protobuf:"fixed64,2,opt,name=qt_request,json=qtRequest,proto3" json:"qt_request,omitempty"`
	QtLimit       float64 `protobuf:"fixed64,3,opt,name=qt_limit,json=qtLimit,proto3" json:"qt_limit,omitempty"`
	SmPartition   int64   `protobuf:"varint,4,opt,name=sm_partition,json=smPartition,proto3" json:"sm_partition,omitempty"`
	Memory        int64   `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`
	GpuClientPort int32   `protobuf:"varint,6,opt,name=gpu_client_port,json=gpuClientPort,proto3" json:"gpu_client_port,omitempty"`
}

func (x *FastPodGPUConfig) Reset() {
	*x = FastPodGPUConfig{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastPodGPUConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastPodGPUConfig) ProtoMessage() {}

func (x *FastPodGPUConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastPodGPUConfig.ProtoReflect.Descriptor instead.
func (*FastPodGPUConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{9}
}

func (x *FastPodGPUConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FastPodGPUConfig) GetQtRequest() float64 {
	if x != nil {
		return x.QtRequest
	}
	return 0
}

func (x *FastPodGPUConfig) GetQtLimit() float64 {
	if x != nil {
		return x.QtLimit
	}
	return 0
}

func (x *FastPodGPUConfig) GetSmPartition() int64 {
	if x != nil {
		return x.SmPartition
	}
	return 0
}

func (x *FastPodGPUConfig) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *FastPodGPUConfig) GetGpuClientPort() int32 {
	if x != nil {
		return x.GpuClientPort
	}
	return 0
}

type UpdateMPSConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUuid        string              `protobuf:"bytes,1,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
	FastpodGpuConfigs []*FastPodGPUConfig `protobuf:"bytes,2,rep,name=fastpod_gpu_configs,json=fastpodGpuConfigs,proto3" json:"fastpod_gpu_configs,omitempty"`
}

func (x *UpdateMPSConfigsRequest) Reset() {
	*x = UpdateMPSConfigsRequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMPSConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMPSConfigsRequest) ProtoMessage() {}

func (x *UpdateMPSConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMPSConfigsRequest.ProtoReflect.Descriptor instead.
func (*UpdateMPSConfigsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMPSConfigsRequest) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *UpdateMPSConfigsRequest) GetFastpodGpuConfigs() []*FastPodGPUConfig {
	if x != nil {
		return x.FastpodGpuConfigs
	}
	return nil
}

type UpdateMPSConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMPSConfigsResponse) Reset() {
	*x = UpdateMPSConfigsResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMPSConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMPSConfigsResponse) ProtoMessage() {}

func (x *UpdateMPSConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMPSConfigsResponse.ProtoReflect.Descriptor instead.
func (*UpdateMPSConfigsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{11}
}

type EnableMPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUuid string `protobuf:"bytes,1,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
}

func (x *EnableMPSRequest) Reset() {
	*x = EnableMPSRequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableMPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMPSRequest) ProtoMessage() {}

func (x *EnableMPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMPSRequest.ProtoReflect.Descriptor instead.
func (*EnableMPSRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{12}
}

func (x *EnableMPSRequest) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

type EnableMPSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MpsConfig *MPSConfig `protobuf:"bytes,3,opt,name=mps_config,json=mpsConfig,proto3" json:"mps_config,omitempty"`
}

func (x *EnableMPSResponse) Reset() {
	*x = EnableMPSResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableMPSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMPSResponse) ProtoMessage() {}

func (x *EnableMPSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMPSResponse.ProtoReflect.Descriptor instead.
func (*EnableMPSResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{13}
}

func (x *EnableMPSResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnableMPSResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EnableMPSResponse) GetMpsConfig() *MPSConfig {
	if x != nil {
		return x.MpsConfig
	}
	return nil
}

type DisableMPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUuid string `protobuf:"bytes,1,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
}

func (x *DisableMPSRequest) Reset() {
	*x = DisableMPSRequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableMPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMPSRequest) ProtoMessage() {}

func (x *DisableMPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMPSRequest.ProtoReflect.Descriptor instead.
func (*DisableMPSRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{14}
}

func (x *DisableMPSRequest) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

type DisableMPSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DisableMPSResponse) Reset() {
	*x = DisableMPSResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableMPSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMPSResponse) ProtoMessage() {}

func (x *DisableMPSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMPSResponse.ProtoReflect.Descriptor instead.
func (*DisableMPSResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{15}
}

func (x *DisableMPSResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DisableMPSResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message for requesting to release a virtual GPU
type ReleaseVirtualGPURequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ReleaseVirtualGPURequest) Reset() {
	*x = ReleaseVirtualGPURequest{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseVirtualGPURequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseVirtualGPURequest) ProtoMessage() {}

func (x *ReleaseVirtualGPURequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseVirtualGPURequest.ProtoReflect.Descriptor instead.
func (*ReleaseVirtualGPURequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{16}
}

func (x *ReleaseVirtualGPURequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Response for a virtual GPU release request
type ReleaseVirtualGPUResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success              bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AvailableVirtualGpus []*VirtualGPU `protobuf:"bytes,3,rep,name=available_virtual_gpus,json=availableVirtualGpus,proto3" json:"available_virtual_gpus,omitempty"`
}

func (x *ReleaseVirtualGPUResponse) Reset() {
	*x = ReleaseVirtualGPUResponse{}
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseVirtualGPUResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseVirtualGPUResponse) ProtoMessage() {}

func (x *ReleaseVirtualGPUResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_seti_v1_configurator_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseVirtualGPUResponse.ProtoReflect.Descriptor instead.
func (*ReleaseVirtualGPUResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP(), []int{17}
}

func (x *ReleaseVirtualGPUResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReleaseVirtualGPUResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReleaseVirtualGPUResponse) GetAvailableVirtualGpus() []*VirtualGPU {
	if x != nil {
		return x.AvailableVirtualGpus
	}
	return nil
}

var File_pkg_proto_seti_v1_configurator_proto protoreflect.FileDescriptor

var file_pkg_proto_seti_v1_configurator_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x74, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x22,
	0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x50, 0x55, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x50, 0x55, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x12,
	0x33, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x09, 0x67, 0x70, 0x75, 0x73, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x0a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x50, 0x55, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6d, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x50, 0x55, 0x48,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x47, 0x70,
	0x75, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x5f, 0x67, 0x70, 0x75, 0x22, 0xbc, 0x02, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x0a, 0x6d, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x70, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x70, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x62, 0x0a, 0x09, 0x4d, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6d, 0x70, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x4d, 0x70, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x70, 0x75,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x50, 0x55, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x47, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x16, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x67,
	0x70, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x74, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x14,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x70, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x70, 0x75, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x64, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x71, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x71, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6d, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x70, 0x75,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x70,
	0x6f, 0x64, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x11, 0x66, 0x61, 0x73, 0x74, 0x70, 0x6f, 0x64, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x50, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x6d, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6d, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x34, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x2e, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x47, 0x50, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x9a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x49, 0x0a, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x73, 0x32, 0xdf, 0x04, 0x0a,
	0x16, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x50, 0x55, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x65,
	0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x50, 0x55, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x50, 0x55, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x50, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x74,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x2e,
	0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x12, 0x21, 0x2e, 0x73, 0x65,
	0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50,
	0x53, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x50, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x74, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x50, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x91,
	0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x74, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x11,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4b, 0x6f, 0x6e, 0x74, 0x6f, 0x6e, 0x47, 0x75, 0x2f, 0x46, 0x61, 0x53, 0x54, 0x2d, 0x47, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x74, 0x69, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x65, 0x74, 0x69, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x07,
	0x53, 0x65, 0x74, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x53, 0x65, 0x74, 0x69, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x13, 0x53, 0x65, 0x74, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x53, 0x65, 0x74, 0x69, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_seti_v1_configurator_proto_rawDescOnce sync.Once
	file_pkg_proto_seti_v1_configurator_proto_rawDescData = file_pkg_proto_seti_v1_configurator_proto_rawDesc
)

func file_pkg_proto_seti_v1_configurator_proto_rawDescGZIP() []byte {
	file_pkg_proto_seti_v1_configurator_proto_rawDescOnce.Do(func() {
		file_pkg_proto_seti_v1_configurator_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_seti_v1_configurator_proto_rawDescData)
	})
	return file_pkg_proto_seti_v1_configurator_proto_rawDescData
}

var file_pkg_proto_seti_v1_configurator_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_pkg_proto_seti_v1_configurator_proto_goTypes = []any{
	(*GetAvailableGPUsRequest)(nil),   // 0: seti.v1.GetAvailableGPUsRequest
	(*GetAvailableGPUsResponse)(nil),  // 1: seti.v1.GetAvailableGPUsResponse
	(*VirtualGPU)(nil),                // 2: seti.v1.VirtualGPU
	(*GPU)(nil),                       // 3: seti.v1.GPU
	(*MPSConfig)(nil),                 // 4: seti.v1.MPSConfig
	(*RequestVirtualGPURequest)(nil),  // 5: seti.v1.RequestVirtualGPURequest
	(*RequestVirtualGPUResponse)(nil), // 6: seti.v1.RequestVirtualGPUResponse
	(*GetHealthRequest)(nil),          // 7: seti.v1.GetHealthRequest
	(*GetHealthResponse)(nil),         // 8: seti.v1.GetHealthResponse
	(*FastPodGPUConfig)(nil),          // 9: seti.v1.FastPodGPUConfig
	(*UpdateMPSConfigsRequest)(nil),   // 10: seti.v1.UpdateMPSConfigsRequest
	(*UpdateMPSConfigsResponse)(nil),  // 11: seti.v1.UpdateMPSConfigsResponse
	(*EnableMPSRequest)(nil),          // 12: seti.v1.EnableMPSRequest
	(*EnableMPSResponse)(nil),         // 13: seti.v1.EnableMPSResponse
	(*DisableMPSRequest)(nil),         // 14: seti.v1.DisableMPSRequest
	(*DisableMPSResponse)(nil),        // 15: seti.v1.DisableMPSResponse
	(*ReleaseVirtualGPURequest)(nil),  // 16: seti.v1.ReleaseVirtualGPURequest
	(*ReleaseVirtualGPUResponse)(nil), // 17: seti.v1.ReleaseVirtualGPUResponse
}
var file_pkg_proto_seti_v1_configurator_proto_depIdxs = []int32{
	2,  // 0: seti.v1.GetAvailableGPUsResponse.gpus:type_name -> seti.v1.VirtualGPU
	2,  // 1: seti.v1.GetAvailableGPUsResponse.gpus_in_use:type_name -> seti.v1.VirtualGPU
	3,  // 2: seti.v1.VirtualGPU.provisioned_gpu:type_name -> seti.v1.GPU
	4,  // 3: seti.v1.GPU.mps_config:type_name -> seti.v1.MPSConfig
	3,  // 4: seti.v1.RequestVirtualGPUResponse.provisioned_gpu:type_name -> seti.v1.GPU
	2,  // 5: seti.v1.RequestVirtualGPUResponse.available_virtual_gpus:type_name -> seti.v1.VirtualGPU
	9,  // 6: seti.v1.UpdateMPSConfigsRequest.fastpod_gpu_configs:type_name -> seti.v1.FastPodGPUConfig
	4,  // 7: seti.v1.EnableMPSResponse.mps_config:type_name -> seti.v1.MPSConfig
	2,  // 8: seti.v1.ReleaseVirtualGPUResponse.available_virtual_gpus:type_name -> seti.v1.VirtualGPU
	0,  // 9: seti.v1.GPUConfiguratorService.GetAvailableGPUs:input_type -> seti.v1.GetAvailableGPUsRequest
	5,  // 10: seti.v1.GPUConfiguratorService.RequestVirtualGPU:input_type -> seti.v1.RequestVirtualGPURequest
	7,  // 11: seti.v1.GPUConfiguratorService.GetHealth:input_type -> seti.v1.GetHealthRequest
	16, // 12: seti.v1.GPUConfiguratorService.ReleaseVirtualGPU:input_type -> seti.v1.ReleaseVirtualGPURequest
	12, // 13: seti.v1.GPUConfiguratorService.EnableMPS:input_type -> seti.v1.EnableMPSRequest
	14, // 14: seti.v1.GPUConfiguratorService.DisableMPS:input_type -> seti.v1.DisableMPSRequest
	10, // 15: seti.v1.GPUConfiguratorService.UpdateMPSConfigs:input_type -> seti.v1.UpdateMPSConfigsRequest
	1,  // 16: seti.v1.GPUConfiguratorService.GetAvailableGPUs:output_type -> seti.v1.GetAvailableGPUsResponse
	6,  // 17: seti.v1.GPUConfiguratorService.RequestVirtualGPU:output_type -> seti.v1.RequestVirtualGPUResponse
	8,  // 18: seti.v1.GPUConfiguratorService.GetHealth:output_type -> seti.v1.GetHealthResponse
	17, // 19: seti.v1.GPUConfiguratorService.ReleaseVirtualGPU:output_type -> seti.v1.ReleaseVirtualGPUResponse
	13, // 20: seti.v1.GPUConfiguratorService.EnableMPS:output_type -> seti.v1.EnableMPSResponse
	15, // 21: seti.v1.GPUConfiguratorService.DisableMPS:output_type -> seti.v1.DisableMPSResponse
	11, // 22: seti.v1.GPUConfiguratorService.UpdateMPSConfigs:output_type -> seti.v1.UpdateMPSConfigsResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_proto_seti_v1_configurator_proto_init() }
func file_pkg_proto_seti_v1_configurator_proto_init() {
	if File_pkg_proto_seti_v1_configurator_proto != nil {
		return
	}
	file_pkg_proto_seti_v1_configurator_proto_msgTypes[2].OneofWrappers = []any{}
	file_pkg_proto_seti_v1_configurator_proto_msgTypes[3].OneofWrappers = []any{}
	file_pkg_proto_seti_v1_configurator_proto_msgTypes[5].OneofWrappers = []any{}
	file_pkg_proto_seti_v1_configurator_proto_msgTypes[6].OneofWrappers = []any{}
	file_pkg_proto_seti_v1_configurator_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_seti_v1_configurator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_seti_v1_configurator_proto_goTypes,
		DependencyIndexes: file_pkg_proto_seti_v1_configurator_proto_depIdxs,
		MessageInfos:      file_pkg_proto_seti_v1_configurator_proto_msgTypes,
	}.Build()
	File_pkg_proto_seti_v1_configurator_proto = out.File
	file_pkg_proto_seti_v1_configurator_proto_rawDesc = nil
	file_pkg_proto_seti_v1_configurator_proto_goTypes = nil
	file_pkg_proto_seti_v1_configurator_proto_depIdxs = nil
}
